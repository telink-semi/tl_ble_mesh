/********************************************************************************************************
 * @file     ble_stack.h
 *
 * @brief    This is the header file for BLE SDK
 *
 * @author       BLE GROUP
 * @date         2020.06
 *
 * @par      Copyright (c) 2022, Telink Semiconductor (Shanghai) Co., Ltd.
 *           All rights reserved.
 *
 *           The information contained herein is confidential property of Telink
 *           Semiconductor (Shanghai) Co., Ltd. and is available under the terms
 *           of Commercial License Agreement between Telink Semiconductor (Shanghai)
 *           Co., Ltd. and the licensee or the terms described here-in. This heading
 *           MUST NOT be removed from this file.
 *
 *           Licensee shall not delete, modify or alter (or permit any third party to delete, modify, or  
 *           alter) any information contained herein in whole or in part except as expressly authorized  
 *           by Telink semiconductor (shanghai) Co., Ltd. Otherwise, licensee shall be solely responsible  
 *           for any claim to the extent arising out of or relating to such deletion(s), modification(s)  
 *           or alteration(s).
 *
 *           Licensees are granted free, non-transferable use of the information in this
 *           file under Mutual Non-Disclosure Agreement. NO WARRENTY of ANY KIND is provided.
 *
 *******************************************************************************************************/

#ifndef BLE_STACK_H_
#define BLE_STACK_H_

#include "stack/ble/ble_config.h"


/**
 *  @brief  Definition for Link Layer Feature Support
 */

#define LL_FEATURE_MASK_LL_ENCRYPTION                        			BIT(0) //core_4.0
#define LL_FEATURE_MASK_CONNECTION_PARA_REQUEST_PROCEDURE  	 			BIT(1) //core_4.1
#define LL_FEATURE_MASK_EXTENDED_REJECT_INDICATION           			BIT(2) //core_4.1
#define LL_FEATURE_MASK_SLAVE_INITIATED_FEATURES_EXCHANGE    			BIT(3) //core_4.1
#define LL_FEATURE_MASK_LE_PING                             	 		BIT(4) //core_4.1
#define LL_FEATURE_MASK_LE_DATA_LENGTH_EXTENSION             			BIT(5) //core_4.2
#define LL_FEATURE_MASK_LL_PRIVACY                           			BIT(6) //core_4.2
#define LL_FEATURE_MASK_EXTENDED_SCANNER_FILTER_POLICIES   	 			BIT(7) //core_4.2

#define LL_FEATURE_MASK_LE_2M_PHY         					 			BIT(8)  //core_5.0
#define LL_FEATURE_MASK_STABLE_MODULATION_INDEX_TX 			 			BIT(9)	//core_5.0
#define LL_FEATURE_MASK_STABLE_MODULATION_INDEX_RX 			 			BIT(10)	//core_5.0
#define LL_FEATURE_MASK_LE_CODED_PHY     					 			BIT(11)	//core_5.0
#define LL_FEATURE_MASK_LE_EXTENDED_ADVERTISING          	 			BIT(12)	//core_5.0
#define LL_FEATURE_MASK_LE_PERIODIC_ADVERTISING     		 			BIT(13)	//core_5.0
#define LL_FEATURE_MASK_CHANNEL_SELECTION_ALGORITHM2         			BIT(14)	//core_5.0
#define LL_FEATURE_MASK_LE_POWER_CLASS_1 					 			BIT(15)	//core_5.0
#define LL_FEATURE_MASK_MIN_USED_OF_USED_CHANNELS   	    	 		BIT(16)	//core_5.0

#define LL_FEATURE_MASK_CONNECTION_CTE_REQUEST  	    				BIT(17)	//core_5.1
#define LL_FEATURE_MASK_CONNECTION_CTE_RESPONSE  	    	 			BIT(18)	//core_5.1
#define LL_FEATURE_MASK_CONNECTIONLESS_CTE_TRANSMITTER  	 			BIT(19)	//core_5.1
#define LL_FEATURE_MASK_CONNECTIONLESS_CTE_RECEIVER  	     			BIT(20)	//core_5.1
#define LL_FEATURE_MASK_ANTENNA_SWITCHING_DURING_CTE_TRANSMISSION  	 	BIT(21)	//core_5.1
#define LL_FEATURE_MASK_ANTENNA_SWITCHING_DURING_CTE_RECEPTION  	 	BIT(22)	//core_5.1
#define LL_FEATURE_MASK_RECEIVING_CONSTANT_TONE_EXTENSIONS  	 		BIT(23)	//core_5.1
#define LL_FEATURE_MASK_PERIODIC_ADVERTISING_SYNC_TRANSFER_SENDOR  	 	BIT(24)	//core_5.1
#define LL_FEATURE_MASK_PERIODIC_ADVERTISING_SYNC_TRANSFER_RECIPIENT  	BIT(25)	//core_5.1
#define LL_FEATURE_MASK_SLEEP_CLOCK_ACCURACY_UPDATES		   	 	    BIT(26)	//core_5.1
#define LL_FEATURE_MASK_REMOTE_PUBLIC_KEY_VALIDATION  					BIT(27)	//core_5.1

#define LL_FEATURE_MASK_CONNECTED_ISOCHRONOUS_STREAM_MASTER  			BIT(28)	//core_5.2
#define LL_FEATURE_MASK_CONNECTED_ISOCHRONOUS_STREAM_SLAVE  			BIT(29)	//core_5.2
#define LL_FEATURE_MASK_ISOCHRONOUS_BROADCASTER  						BIT(30)	//core_5.2
#define LL_FEATURE_MASK_SYNCHRONIZED_RECEIVER	  						BIT(31)	//core_5.2
#define LL_FEATURE_MASK_ISOCHRONOUS_CHANNELS	  						BIT(0)	//core_5.2
#define LL_FEATURE_MASK_LE_POWER_CTRL_REQUEST	  						BIT(1)	//core_5.2
#define LL_FEATURE_MASK_LE_POWER_CHANGE_INDICATION	  					BIT(2)	//core_5.2
#define LL_FEATURE_MASK_LE_PATH_LOSS_MONITORING	  						BIT(3)	//core_5.2


#define LL_FEATURE_MASK_PERIODIC_ADV_ADI_SUPPORT	  					BIT(4)	//core_5.3
#define LL_FEATURE_MASK_CONNECTION_SUBRATING	  						BIT(5)	//core_5.3
#define LL_FEATURE_MASK_CONNECTION_SUBRATING_HOST	  					BIT(6)	//core_5.3
#define LL_FEATURE_MASK_CHANNEL_CLASSIFICATION	  						BIT(7)	//core_5.3




/////////////////////////////////////////////////////////////////////////////

#define         VENDOR_ID                       0x0211
#define         VENDOR_ID_HI_B                  U16_HI(VENDOR_ID)
#define         VENDOR_ID_LO_B                  U16_LO(VENDOR_ID)

#define			BLUETOOTH_VER_4_0				6
#define			BLUETOOTH_VER_4_1				7
#define			BLUETOOTH_VER_4_2				8
#define			BLUETOOTH_VER_5_0				9
#define			BLUETOOTH_VER_5_1				10
#define			BLUETOOTH_VER_5_2				11
#define			BLUETOOTH_VER_5_3				12



#ifndef 		BLUETOOTH_VER
#define			BLUETOOTH_VER					BLUETOOTH_VER_5_3
#endif


#if (BLUETOOTH_VER == BLUETOOTH_VER_4_2)
	#define			BLUETOOTH_VER_SUBVER			0x22BB
#elif (BLUETOOTH_VER == BLUETOOTH_VER_5_0)
	#define			BLUETOOTH_VER_SUBVER			0x1C1C
#else
	#define			BLUETOOTH_VER_SUBVER			0x4103
#endif



/* support privacy & RPA from BLE 4.2, do not consider previous version */
#define	LL_FEATURE_ENABLE_PRIVACY										LL_FEATURE_SUPPORT_PRIVACY



#if (BLUETOOTH_VER == BLUETOOTH_VER_4_0)
	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define LL_CMD_MAX						   							LL_REJECT_IND

#elif (BLUETOOTH_VER == BLUETOOTH_VER_4_1)
	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				1
	#define	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE			1
	#define	LL_FEATURE_ENABLE_LE_PING									1

	#define LL_CMD_MAX						   							LL_PING_RSP

#elif (BLUETOOTH_VER == BLUETOOTH_VER_4_2)

	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				1
	#define	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE			1
	#define	LL_FEATURE_ENABLE_LE_PING									1
	#define	LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION					LL_FEATURE_SUPPORT_LE_DATA_LENGTH_EXTENSION
	#define LL_CMD_MAX						  							LL_LENGTH_RSP

#elif (BLUETOOTH_VER == BLUETOOTH_VER_5_0)

	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				1
	#define	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE			1
	#define	LL_FEATURE_ENABLE_LE_PING									1
	#define	LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION					LL_FEATURE_SUPPORT_LE_DATA_LENGTH_EXTENSION
    #define LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES          LL_FEATURE_SUPPORT_EXTENDED_SCANNER_FILTER_POLICIES
    #define	LL_FEATURE_ENABLE_LE_2M_PHY									LL_FEATURE_SUPPORT_LE_2M_PHY
	#define	LL_FEATURE_ENABLE_LE_CODED_PHY								LL_FEATURE_SUPPORT_LE_CODED_PHY
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING					LL_FEATURE_SUPPORT_LE_EXTENDED_ADVERTISING
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING					LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING
	#define	LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2				LL_FEATURE_SUPPORT_CHANNEL_SELECTION_ALGORITHM2
    #define LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS                 LL_FEATURE_SUPPORT_MIN_USED_OF_USED_CHANNELS

	#define	LL_FEATURE_ENABLE_LE_EXTENDED_SCAN							LL_FEATURE_SUPPORT_LE_EXTENDED_SCANNING  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_INITIATE						LL_FEATURE_SUPPORT_LE_EXTENDED_INITIATE  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING_SYNC				LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING_SYNC

	#define LL_CMD_MAX						   							LL_MIN_USED_CHN_IND

#elif (BLUETOOTH_VER == BLUETOOTH_VER_5_1)
	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				1
	#define	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE			1
	#define	LL_FEATURE_ENABLE_LE_PING									1
	#define	LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION					LL_FEATURE_SUPPORT_LE_DATA_LENGTH_EXTENSION
	#define LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES          LL_FEATURE_SUPPORT_EXTENDED_SCANNER_FILTER_POLICIES
    #define	LL_FEATURE_ENABLE_LE_2M_PHY									LL_FEATURE_SUPPORT_LE_2M_PHY
	#define	LL_FEATURE_ENABLE_LE_CODED_PHY								LL_FEATURE_SUPPORT_LE_CODED_PHY
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING					LL_FEATURE_SUPPORT_LE_EXTENDED_ADVERTISING
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING					LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING
	#define	LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2				LL_FEATURE_SUPPORT_CHANNEL_SELECTION_ALGORITHM2
	#define LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS                 LL_FEATURE_SUPPORT_MIN_USED_OF_USED_CHANNELS
    #define	LL_FEATURE_EANBLE_LE_AOA_AOD								LL_FEATURE_SUPPORT_LE_AOA_AOD
	#define LL_FEATURE_ENABLE_CONNECTION_CTE_REQUEST					LL_FEATURE_SUPPORT_CONNECTION_CTE_REQUEST
	#define LL_FEATURE_ENABLE_CONNECTION_CTE_RESPONSE					LL_FEATURE_SUPPORT_CONNECTION_CTE_RESPONSE
	#define LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_TRANSMITTER			LL_FEATURE_SUPPORT_CONNECTIONLESS_CTE_TRANSMITTER
	#define LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_RECEIVER				LL_FEATURE_SUPPORT_CONNECTIONLESS_CTE_RECEIVER
	#define	LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD	LL_FEATURE_SUPPORT_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD
	#define	LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_RECEPTION_AOA		LL_FEATURE_SUPPORT_ANTENNA_SWITCHING_CTE_RECEPTION_AOA
	#define LL_FEATURE_ENABLE_RECEIVING_CONSTANT_TONE_EXTENSIONS		LL_FEATURE_SUPPORT_RECEIVING_CONSTANT_TONE_EXTENSIONS
	#define	LL_FEATURE_EANBLE_LE_PAST_SENDER							LL_FEATURE_SUPPORT_LE_PAST_SENDER
	#define	LL_FEATURE_EANBLE_LE_PAST_RECIPIENT							LL_FEATURE_SUPPORT_LE_PAST_RECIPIENT

	#define	LL_FEATURE_ENABLE_PAST										(     LL_FEATURE_SUPPORT_LE_PAST_SENDER \
																			| LL_FEATURE_SUPPORT_LE_PAST_RECIPIENT )

	#define	LL_FEATURE_ENABLE_LE_EXTENDED_SCAN							LL_FEATURE_SUPPORT_LE_EXTENDED_SCANNING  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_INITIATE						LL_FEATURE_SUPPORT_LE_EXTENDED_INITIATE  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING_SYNC				LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING_SYNC

	#define LL_CMD_MAX						   							LL_CLOCK_ACCURACY_RSP

#elif (BLUETOOTH_VER == BLUETOOTH_VER_5_2)

	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				1
	#define	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE			1
	#define	LL_FEATURE_ENABLE_LE_PING									1
	#define	LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION					LL_FEATURE_SUPPORT_LE_DATA_LENGTH_EXTENSION
	#define LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES          LL_FEATURE_SUPPORT_EXTENDED_SCANNER_FILTER_POLICIES
    #define	LL_FEATURE_ENABLE_LE_2M_PHY									LL_FEATURE_SUPPORT_LE_2M_PHY
	#define	LL_FEATURE_ENABLE_LE_CODED_PHY								LL_FEATURE_SUPPORT_LE_CODED_PHY
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING					LL_FEATURE_SUPPORT_LE_EXTENDED_ADVERTISING
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING					LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING
	#define	LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2				LL_FEATURE_SUPPORT_CHANNEL_SELECTION_ALGORITHM2
	#define LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS                 LL_FEATURE_SUPPORT_MIN_USED_OF_USED_CHANNELS
    #define	LL_FEATURE_EANBLE_LE_AOA_AOD								LL_FEATURE_SUPPORT_LE_AOA_AOD
	#define LL_FEATURE_ENABLE_CONNECTION_CTE_REQUEST					LL_FEATURE_SUPPORT_CONNECTION_CTE_REQUEST
	#define LL_FEATURE_ENABLE_CONNECTION_CTE_RESPONSE					LL_FEATURE_SUPPORT_CONNECTION_CTE_RESPONSE
	#define LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_TRANSMITTER			LL_FEATURE_SUPPORT_CONNECTIONLESS_CTE_TRANSMITTER
	#define LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_RECEIVER				LL_FEATURE_SUPPORT_CONNECTIONLESS_CTE_RECEIVER
	#define	LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD	LL_FEATURE_SUPPORT_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD
	#define	LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_RECEPTION_AOA		LL_FEATURE_SUPPORT_ANTENNA_SWITCHING_CTE_RECEPTION_AOA
	#define LL_FEATURE_ENABLE_RECEIVING_CONSTANT_TONE_EXTENSIONS		LL_FEATURE_SUPPORT_RECEIVING_CONSTANT_TONE_EXTENSIONS
	#define	LL_FEATURE_EANBLE_LE_PAST_SENDER							LL_FEATURE_SUPPORT_LE_PAST_SENDER
	#define	LL_FEATURE_EANBLE_LE_PAST_RECIPIENT							LL_FEATURE_SUPPORT_LE_PAST_RECIPIENT
	#define	LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER		LL_FEATURE_SUPPORT_CONNECTED_ISOCHRONOUS_STREAM_MASTER
	#define	LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE		LL_FEATURE_SUPPORT_CONNECTED_ISOCHRONOUS_STREAM_SLAVE
	#define	LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER					LL_FEATURE_SUPPORT_ISOCHRONOUS_BROADCASTER
	#define	LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER						LL_FEATURE_SUPPORT_SYNCHRONIZED_RECEIVER
	#define	LL_FEATURE_ENABLE_ISOCHRONOUS_CHANNELS						LL_FEATURE_SUPPORT_ISOCHRONOUS_CHANNELS
	#define	LL_FEATURE_ENABLE_POWER_CONTROL_REQUEST						LL_FEATURE_SUPPORT_POWER_CONTROL_REQUEST
	#define	LL_FEATURE_ENABLE_POWER_LOSS_MONITORING						LL_FEATURE_SUPPORT_POWER_LOSS_MONITORING

	#define	LL_FEATURE_ENABLE_PAST										(     LL_FEATURE_SUPPORT_LE_PAST_SENDER \
																			| LL_FEATURE_SUPPORT_LE_PAST_RECIPIENT )

	#define	LL_FEATURE_ENABLE_POWER_CONTROL								(     LL_FEATURE_SUPPORT_POWER_CONTROL_REQUEST \
																			| LL_FEATURE_SUPPORT_POWER_LOSS_MONITORING )

	#define LL_FEATURE_ENABLE_CONNECTED_ISO								(     LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER \
																			| LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE )

	#define LL_FEATURE_ENABLE_CONNECTIONLESS_ISO  						(	  LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER				\
																			| LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER )

	#define LL_FEATURE_ENABLE_ISO										(     LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER \
																			| LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE \
																			| LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER				\
																			| LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER )

	#define	LL_FEATURE_ENABLE_LE_EXTENDED_SCAN							LL_FEATURE_SUPPORT_LE_EXTENDED_SCANNING  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_INITIATE						LL_FEATURE_SUPPORT_LE_EXTENDED_INITIATE  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING_SYNC				LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING_SYNC

	#define	LL_FEATURE_ENABLE_ISOCHRONOUS_TEST_MODE						LL_FEATURE_SUPPORT_ISOCHRONOUS_TEST_MODE //Vendor define

	#define LL_CMD_MAX						   							LL_POWER_CHANGE_IND



#elif (BLUETOOTH_VER == BLUETOOTH_VER_5_3)

	#define LL_FEATURE_ENABLE_LE_ENCRYPTION								1
	#define	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				1
	#define	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE			1
	#define	LL_FEATURE_ENABLE_LE_PING									1
	#define	LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION					LL_FEATURE_SUPPORT_LE_DATA_LENGTH_EXTENSION
    #define LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES          LL_FEATURE_SUPPORT_EXTENDED_SCANNER_FILTER_POLICIES
    #define	LL_FEATURE_ENABLE_LE_2M_PHY									LL_FEATURE_SUPPORT_LE_2M_PHY
	#define	LL_FEATURE_ENABLE_LE_CODED_PHY								LL_FEATURE_SUPPORT_LE_CODED_PHY
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING					LL_FEATURE_SUPPORT_LE_EXTENDED_ADVERTISING
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING					LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING
	#define	LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2				LL_FEATURE_SUPPORT_CHANNEL_SELECTION_ALGORITHM2
    #define LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS                 LL_FEATURE_SUPPORT_MIN_USED_OF_USED_CHANNELS
	#define	LL_FEATURE_EANBLE_LE_AOA_AOD								LL_FEATURE_SUPPORT_LE_AOA_AOD
	#define LL_FEATURE_ENABLE_CONNECTION_CTE_REQUEST					LL_FEATURE_SUPPORT_CONNECTION_CTE_REQUEST
	#define LL_FEATURE_ENABLE_CONNECTION_CTE_RESPONSE					LL_FEATURE_SUPPORT_CONNECTION_CTE_RESPONSE
	#define LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_TRANSMITTER			LL_FEATURE_SUPPORT_CONNECTIONLESS_CTE_TRANSMITTER
	#define LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_RECEIVER				LL_FEATURE_SUPPORT_CONNECTIONLESS_CTE_RECEIVER
	#define	LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD	LL_FEATURE_SUPPORT_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD
	#define	LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_RECEPTION_AOA		LL_FEATURE_SUPPORT_ANTENNA_SWITCHING_CTE_RECEPTION_AOA
	#define LL_FEATURE_ENABLE_RECEIVING_CONSTANT_TONE_EXTENSIONS		LL_FEATURE_SUPPORT_RECEIVING_CONSTANT_TONE_EXTENSIONS
	#define	LL_FEATURE_EANBLE_LE_PAST_SENDER							LL_FEATURE_SUPPORT_LE_PAST_SENDER
	#define	LL_FEATURE_EANBLE_LE_PAST_RECIPIENT							LL_FEATURE_SUPPORT_LE_PAST_RECIPIENT
	#define LL_FEATURE_ENABLE_SLEEP_CLK_ACCURACY_UPDATE                 LL_FEATURE_SUPPORT_SLEEP_CLK_ACCURACY_UPDATE //0
	#define LL_FEATURE_ENABLE_REMOTE_PUBLIC_KEY_VALIDATION              LL_FEATURE_SUPPORT_REMOTE_PUBLIC_KEY_VALIDATION //1
	#define	LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER		LL_FEATURE_SUPPORT_CONNECTED_ISOCHRONOUS_STREAM_MASTER
	#define	LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE		LL_FEATURE_SUPPORT_CONNECTED_ISOCHRONOUS_STREAM_SLAVE
	#define	LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER					LL_FEATURE_SUPPORT_ISOCHRONOUS_BROADCASTER
	#define	LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER						LL_FEATURE_SUPPORT_SYNCHRONIZED_RECEIVER
	#define	LL_FEATURE_ENABLE_ISOCHRONOUS_CHANNELS						LL_FEATURE_SUPPORT_ISOCHRONOUS_CHANNELS
	#define	LL_FEATURE_ENABLE_POWER_CONTROL_REQUEST						LL_FEATURE_SUPPORT_POWER_CONTROL_REQUEST
	#define	LL_FEATURE_ENABLE_POWER_LOSS_MONITORING						LL_FEATURE_SUPPORT_POWER_LOSS_MONITORING

	#define	LL_FEATURE_ENABLE_PAST										(     LL_FEATURE_SUPPORT_LE_PAST_SENDER \
																			| LL_FEATURE_SUPPORT_LE_PAST_RECIPIENT )

	#define	LL_FEATURE_ENABLE_POWER_CONTROL								(     LL_FEATURE_SUPPORT_POWER_CONTROL_REQUEST \
																			| LL_FEATURE_SUPPORT_POWER_LOSS_MONITORING )

	#define LL_FEATURE_ENABLE_CONNECTED_ISO								(     LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER \
																			| LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE )

	#define LL_FEATURE_ENABLE_CONNECTIONLESS_ISO  						(	  LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER				\
																			| LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER )

	#define LL_FEATURE_ENABLE_ISO										(     LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER \
																			| LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE \
																			| LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER				\
																			| LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER )

	#define	LL_FEATURE_ENABLE_LE_EXTENDED_SCAN							LL_FEATURE_SUPPORT_LE_EXTENDED_SCANNING  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_EXTENDED_INITIATE						LL_FEATURE_SUPPORT_LE_EXTENDED_INITIATE  //Vendor define
	#define	LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING_SYNC				LL_FEATURE_SUPPORT_LE_PERIODIC_ADVERTISING_SYNC

	#define	LL_FEATURE_ENABLE_ISOCHRONOUS_TEST_MODE						LL_FEATURE_SUPPORT_ISOCHRONOUS_TEST_MODE //Vendor define

	#define LL_FEATURE_ENABLE_PERIODIC_ADV_ADI_SUPPORT					LL_FEATURE_SUPPORT_PERIODIC_ADV_ADI_SUPPORT

	#define LL_FEATURE_ENABLE_CONNECTION_SUBRATING						LL_FEATURE_SUPPORT_CONNECTION_SUBRATING

	#define LL_FEATURE_ENABLE_CONNECTION_SUBRATING_HOST					LL_FEATURE_SUPPORT_CONNECTION_SUBRATING_HOST

	#define LL_FEATURE_ENABLE_CHANNEL_CLASSIFICATION					LL_FEATURE_SUPPORT_CHANNEL_CLASSIFICATION

	/* 5.3 and later version support this feature */
	#define LL_FEATURE_ENABLE_RPA_ADV_DATA_RELATED_ADDRESS_CHANGE		LL_FEATURE_SUPPORT_RPA_ADV_DATA_RELATED_ADDRESS_CHANGE


	#define LL_CMD_MAX						   							LL_CHANNEL_STATUS_IND

#else


#endif




#ifndef		 LL_FEATURE_ENABLE_LE_ENCRYPTION
#define		 LL_FEATURE_ENABLE_LE_ENCRYPTION							0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTION_PARA_REQUEST_PROCEDURE
#define		 LL_FEATURE_ENABLE_CONNECTION_PARA_REQUEST_PROCEDURE		0
#endif

#ifndef		 LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION
#define		 LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION				0
#endif

#ifndef		 LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE
#define		 LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE		0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_PING
#define		 LL_FEATURE_ENABLE_LE_PING									0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION
#define		 LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION					0
#endif

#ifndef		 LL_FEATURE_ENABLE_LL_PRIVACY
#define		 LL_FEATURE_ENABLE_LL_PRIVACY								0
#endif

#ifndef		 LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES
#define		 LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES			0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_2M_PHY
#define		 LL_FEATURE_ENABLE_LE_2M_PHY								0
#endif

#ifndef		 LL_FEATURE_ENABLE_STABLE_MODULATION_INDEX_TX
#define		 LL_FEATURE_ENABLE_STABLE_MODULATION_INDEX_TX				0
#endif

#ifndef		 LL_FEATURE_ENABLE_STABLE_MODULATION_INDEX_RX
#define		 LL_FEATURE_ENABLE_STABLE_MODULATION_INDEX_RX				0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_CODED_PHY
#define		 LL_FEATURE_ENABLE_LE_CODED_PHY								0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING
#define		 LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING					0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING
#define		 LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING					0
#endif

#ifndef		 LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2
#define		 LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2				0
#endif

#ifndef      LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS
#define      LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS                0
#endif

#ifndef		 LL_FEATURE_EANBLE_LE_AOA_AOD
#define		 LL_FEATURE_EANBLE_LE_AOA_AOD								0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTION_CTE_REQUEST
#define		 LL_FEATURE_ENABLE_CONNECTION_CTE_REQUEST					0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTION_CTE_RESPONSE
#define		 LL_FEATURE_ENABLE_CONNECTION_CTE_RESPONSE					0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_TRANSMITTER
#define		 LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_TRANSMITTER			0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_RECEIVER
#define		 LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_RECEIVER				0
#endif

#ifndef		 LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD
#define		 LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD	0
#endif

#ifndef		 LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_RECEPTION_AOA
#define		 LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_RECEPTION_AOA		0
#endif

#ifndef		 LL_FEATURE_ENABLE_RECEIVING_CONSTANT_TONE_EXTENSIONS
#define		 LL_FEATURE_ENABLE_RECEIVING_CONSTANT_TONE_EXTENSIONS		0
#endif

#ifndef		 LL_FEATURE_EANBLE_LE_PAST_SENDER
#define		 LL_FEATURE_EANBLE_LE_PAST_SENDER							0
#endif

#ifndef		 LL_FEATURE_EANBLE_LE_PAST_RECIPIENT
#define		 LL_FEATURE_EANBLE_LE_PAST_RECIPIENT						0
#endif

#ifndef     LL_FEATURE_ENABLE_SLEEP_CLK_ACCURACY_UPDATE
#define     LL_FEATURE_ENABLE_SLEEP_CLK_ACCURACY_UPDATE                 0
#endif

#ifndef     LL_FEATURE_ENABLE_REMOTE_PUBLIC_KEY_VALIDATION
#define     LL_FEATURE_ENABLE_REMOTE_PUBLIC_KEY_VALIDATION              0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_POWER_CLASS_1
#define		 LL_FEATURE_ENABLE_LE_POWER_CLASS_1							0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER
#define		 LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER		0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE
#define		 LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE		0
#endif

#ifndef		 LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER
#define		 LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER					0
#endif

#ifndef		 LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER
#define		 LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER					0
#endif

#ifndef		 LL_FEATURE_ENABLE_ISOCHRONOUS_CHANNELS
#define		 LL_FEATURE_ENABLE_ISOCHRONOUS_CHANNELS						0
#endif

#ifndef		 LL_FEATURE_ENABLE_POWER_CONTROL_REQUEST
#define		 LL_FEATURE_ENABLE_POWER_CONTROL_REQUEST					0
#endif

#ifndef		 LL_FEATURE_ENABLE_POWER_LOSS_MONITORING
#define		 LL_FEATURE_ENABLE_POWER_LOSS_MONITORING					0
#endif

#ifndef		 LL_FEATURE_ENABLE_PAST
#define		 LL_FEATURE_ENABLE_PAST										0
#endif

#ifndef		 LL_FEATURE_ENABLE_POWER_CONTROL
#define		 LL_FEATURE_ENABLE_POWER_CONTROL							0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTED_ISO
#define		 LL_FEATURE_ENABLE_CONNECTED_ISO							0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTIONLESS_ISO
#define		 LL_FEATURE_ENABLE_CONNECTIONLESS_ISO						0
#endif

#ifndef		 LL_FEATURE_ENABLE_ISO
#define		 LL_FEATURE_ENABLE_ISO										0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_EXTENDED_SCAN
#define		 LL_FEATURE_ENABLE_LE_EXTENDED_SCAN							0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_EXTENDED_INITIATE
#define		 LL_FEATURE_ENABLE_LE_EXTENDED_INITIATE						0
#endif

#ifndef		 LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING_SYNC
#define		 LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING_SYNC				0
#endif

#ifndef		 LL_FEATURE_ENABLE_ISOCHRONOUS_TEST_MODE
#define		 LL_FEATURE_ENABLE_ISOCHRONOUS_TEST_MODE					0
#endif

#ifndef		 LL_FEATURE_ENABLE_PERIODIC_ADV_ADI_SUPPORT
#define		 LL_FEATURE_ENABLE_PERIODIC_ADV_ADI_SUPPORT					0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTION_SUBRATING
#define		 LL_FEATURE_ENABLE_CONNECTION_SUBRATING						0
#endif

#ifndef		 LL_FEATURE_ENABLE_CONNECTION_SUBRATING_HOST
#define		 LL_FEATURE_ENABLE_CONNECTION_SUBRATING_HOST				0
#endif

#ifndef		 LL_FEATURE_ENABLE_CHANNEL_CLASSIFICATION
#define		 LL_FEATURE_ENABLE_CHANNEL_CLASSIFICATION					0
#endif





//BIT<0:31>
// feature below is conFiged by application or HCI command, corresponding bit must be 0
// <8>  : LL_FEATURE_ENABLE_LE_2M_PHY
// <11> : LL_FEATURE_ENABLE_LE_CODED_PHY
// <12> : LL_FEATURE_ENABLE_LE_EXTENDED_ADVERTISING
// <13> : LL_FEATURE_ENABLE_LE_PERIODIC_ADVERTISING
// <14> : LL_FEATURE_ENABLE_CHANNEL_SELECTION_ALGORITHM2
// <19> : LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_TRANSMITTER
// <20> : LL_FEATURE_ENABLE_CONNECTIONLESS_CTE_RECEIVER
// <21> : LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_TRANSMISSION_AOD
// <22> : LL_FEATURE_ENABLE_ANTENNA_SWITCHING_CTE_RECEPTION_AOA
// <23> : LL_FEATURE_ENABLE_RECEIVING_CONSTANT_TONE_EXTENSIONS
// <24> : LL_FEATURE_EANBLE_LE_PAST_SENDER
// <25> : LL_FEATURE_EANBLE_LE_PAST_RECIPIENT
// <28> : LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_MASTER
// <29> : LL_FEATURE_ENABLE_CONNECTED_ISOCHRONOUS_STREAM_SLAVE
// <30> : LL_FEATURE_ENABLE_ISOCHRONOUS_BROADCASTER
// <31> : LL_FEATURE_ENABLE_SYNCHRONIZED_RECEIVER

#define LL_FEATURE_MASK_BASE0										(	LL_FEATURE_ENABLE_LE_ENCRYPTION 					<<0		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_CONNECTION_PARA_REQUEST_PROCEDURE <<1		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_EXTENDED_REJECT_INDICATION 	   	<<2		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_SLAVE_INITIATED_FEATURES_EXCHANGE <<3		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_LE_PING 						   	<<4		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_LE_DATA_LENGTH_EXTENSION 		   	<<5		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_PRIVACY 					   		<<6		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_EXTENDED_SCANNER_FILTER_POLICIES  <<7		|  \
																		0  													<<8		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_STABLE_MODULATION_INDEX_TX 	   	<<9		|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_STABLE_MODULATION_INDEX_RX  	   	<<10	|  \
																		0  													<<11	|  \
																		0  													<<12	|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	0 		   											<<13	|  \
																		0 		   											<<14	|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_LE_POWER_CLASS_1 				   	<<15	|  \
		   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	LL_FEATURE_ENABLE_MIN_USED_OF_USED_CHANNELS 		<<16 	|  \
																		LL_FEATURE_ENABLE_CONNECTION_CTE_REQUEST			<<17    |  \
																		LL_FEATURE_ENABLE_CONNECTION_CTE_RESPONSE			<<18    |  \
																		0													<<19    |  \
																		0													<<20    |  \
																		0													<<21    |  \
																		0													<<22    |  \
																		0													<<23    |  \
																		0                                                   <<24    |  \
																		0                                                   <<25    |  \
																		LL_FEATURE_ENABLE_SLEEP_CLK_ACCURACY_UPDATE         <<26    |  \
																		LL_FEATURE_ENABLE_REMOTE_PUBLIC_KEY_VALIDATION      <<27    |  \
																		0													<<28   	|  \
																		0 													<<29   	|  \
																		0            										<<30   	|  \
																		0              										<<31	)
//BIT<32:63>
// feature below is conFiged by application or HCI command, corresponding bit must be 0
// <32> :	LL_FEATURE_ENABLE_ISOCHRONOUS_CHANNELS  //Attention: Set by Host, should clear when HCI_reset !!!
// <33> :   LL_FEATURE_ENABLE_POWER_CONTROL_REQUEST
// <34> :   LL_FEATURE_ENABLE_POWER_CONTROL_REQUEST
// <35> :   LL_FEATURE_ENABLE_POWER_LOSS_MONITORING
// <37> :   LL_FEATURE_ENABLE_CONNECTION_SUBRATING
// <39> :   LL_FEATURE_ENABLE_CHANNEL_CLASSIFICATION
#define LL_FEATURE_MASK_BASE1										( 	0              	 									 <<0 | \
	                                                                    0                                                    <<1 | \
																		0                                                    <<2 | \
																		0                                                    <<3 | \
																		LL_FEATURE_ENABLE_PERIODIC_ADV_ADI_SUPPORT           <<4 | \
																		0									                 <<5 | \
																		0                                                    <<7)


extern u32 LL_FEATURE_MASK_0;
extern u32 LL_FEATURE_MASK_1;



#define LL_FEATURE_BYTE_0												U32_BYTE0(LL_FEATURE_MASK_0)
#define LL_FEATURE_BYTE_1												U32_BYTE1(LL_FEATURE_MASK_0)
#define LL_FEATURE_BYTE_2												U32_BYTE2(LL_FEATURE_MASK_0)
#define LL_FEATURE_BYTE_3												U32_BYTE3(LL_FEATURE_MASK_0)
#define LL_FEATURE_BYTE_4												U32_BYTE0(LL_FEATURE_MASK_1)
#define LL_FEATURE_BYTE_5												U32_BYTE1(LL_FEATURE_MASK_1)
#define LL_FEATURE_BYTE_6												U32_BYTE2(LL_FEATURE_MASK_1)
#define LL_FEATURE_BYTE_7												U32_BYTE3(LL_FEATURE_MASK_1)


















#if (LL_FEATURE_ENABLE_PRIVACY)
	#define LL_FEATURE_ENABLE_LOCAL_RPA									LL_FEATURE_SUPPORT_LOCAL_RPA
#endif


#ifndef		 LL_FEATURE_ENABLE_LOCAL_RPA
#define 	 LL_FEATURE_ENABLE_LOCAL_RPA								0
#endif


#ifndef		 LL_FEATURE_ENABLE_RPA_ADV_DATA_RELATED_ADDRESS_CHANGE
#define 	 LL_FEATURE_ENABLE_RPA_ADV_DATA_RELATED_ADDRESS_CHANGE		0
#endif







/******************************************** Link Layer **************************************************************/
#define 		BLE_T_IFS										150	//unit: uS
#define 		MIN_T_MSS										150	//unit: uS	minimum value of T_MSS
#define			BLE_T_MAFS										300 //unit: uS


#define			SCA_MASTER_SLAVE_251_500_PPM					0
#define			SCA_MASTER_SLAVE_151_250_PPM					1
#define			SCA_MASTER_SLAVE_101_150_PPM					2
#define			SCA_MASTER_SLAVE_76_100_PPM						3
#define			SCA_MASTER_SLAVE_51_75_PPM						4
#define			SCA_MASTER_SLAVE_31_50_PPM						5
#define			SCA_MASTER_SLAVE_21_30_PPM						6
#define			SCA_MASTER_SLAVE_0_20_PPM						7


/**
 *  @brief  Definition for LL Control PDU Opcode
 */																		// rf_len without MIC
#define					LL_CONNECTION_UPDATE_REQ	0x00							// 12			12
#define					LL_CHANNEL_MAP_REQ			0x01							//	8			8
#define					LL_TERMINATE_IND			0x02							//	2

#define					LL_ENC_REQ					0x03	// encryption			// 23
#define					LL_ENC_RSP					0x04	// encryption			// 13
#define					LL_START_ENC_REQ			0x05	// encryption			//	1
#define					LL_START_ENC_RSP			0x06	// encryption			//	1

#define					LL_UNKNOWN_RSP				0x07							//	2
#define 				LL_FEATURE_REQ              0x08							//	9
#define 				LL_FEATURE_RSP              0x09							//	9

#define					LL_PAUSE_ENC_REQ			0x0A	// encryption			//	1
#define					LL_PAUSE_ENC_RSP			0x0B	// encryption			//	1

#define 				LL_VERSION_IND              0x0C							//	6
#define 				LL_REJECT_IND         		0x0D							//	2
#define 				LL_SLAVE_FEATURE_REQ        0x0E	//core_4.1				//	9
#define 				LL_CONNECTION_PARAM_REQ		0x0F	//core_4.1				// 24
#define 				LL_CONNECTION_PARAM_RSP		0x10	//core_4.1				// 24
#define					LL_REJECT_IND_EXT			0x11	//core_4.1				//	3
#define 				LL_PING_REQ					0x12    //core_4.1				//	1
#define					LL_PING_RSP					0x13    //core_4.1				//	1
#define 				LL_LENGTH_REQ				0x14    //core_4.2				//	9
#define					LL_LENGTH_RSP				0x15    //core_4.2				//	9
#define 				LL_PHY_REQ					0x16	//core_5.0				//	3
#define 				LL_PHY_RSP					0x17	//core_5.0				//	3
#define 				LL_PHY_UPDATE_IND			0x18	//core_5.0				//	5			5
#define 				LL_MIN_USED_CHN_IND			0x19	//core_5.0				//	3

#define 				LL_CTE_REQ					0x1A	//core_5.1				//	2
#define 				LL_CTE_RSP					0x1B	//core_5.1				//	2
#define 				LL_PERIODIC_SYNC_IND		0x1C	//core_5.1				// 35
#define 				LL_CLOCK_ACCURACY_REQ		0x1D	//core_5.1				//	2
#define 				LL_CLOCK_ACCURACY_RSP		0x1E	//core_5.1				//	2


#define 				LL_CIS_REQ					0x1F	//core_5.2				//	36
#define 				LL_CIS_RSP					0x20	//core_5.2				//	9
#define 				LL_CIS_IND					0x21	//core_5.2				//  16
#define 				LL_CIS_TERMINATE_IND		0x22	//core_5.2				//	4
#define 				LL_POWER_CONTROL_REQ		0x23	//core_5.2				//	4
#define 				LL_POWER_CONTROL_RSP		0x24	//core_5.2				//	5			5
#define 				LL_POWER_CHANGE_IND			0x25	//core_5.2				//	5			5

#define 				LL_SUBRATE_REQ				0x26	//core_5.3				//	11
#define 				LL_SUBRATE_IND				0x27	//core_5.3				//	11
#define 				LL_CHANNEL_REPORTING_IND	0x28	//core_5.3				//	4
#define 				LL_CHANNEL_STATUS_IND		0x29	//core_5.3				//	11




/**
 *  @brief  Definition for LLID of Data Physical Channel PDU header field
 */
#define 				LLID_RESERVED				0x00
#define 				LLID_DATA_CONTINUE			0x01
#define 				LLID_DATA_START				0x02
#define 				LLID_CONTROL				0x03




//Extended Header BIT
#define 		EXTHD_BIT_ADVA         							BIT(0)
#define 		EXTHD_BIT_TARGETA      							BIT(1)
#define			EXTHD_BIT_CTE_INFO         						BIT(2)
#define 		EXTHD_BIT_ADI		    						BIT(3)
#define 		EXTHD_BIT_AUX_PTR      							BIT(4)
#define 		EXTHD_BIT_SYNC_INFO	    						BIT(5)
#define 		EXTHD_BIT_TX_POWER	     						BIT(6)


//Extended Header Length
#define			EXTHD_LEN_6_ADVA								6
#define			EXTHD_LEN_6_TARGETA								6
#define			EXTHD_LEN_1_CTE									1
#define			EXTHD_LEN_2_ADI									2
#define			EXTHD_LEN_3_AUX_PTR								3
#define			EXTHD_LEN_18_SYNC_INFO							18
#define			EXTHD_LEN_1_TX_POWER							1


#define 		LL_EXTADV_MODE_NON_CONN_NON_SCAN    			(0x00)
#define 		LL_EXTADV_MODE_CONN        						(0x01)		//connectable, none_scannable
#define 		LL_EXTADV_MODE_SCAN        						(0x02)      //scannable,   none_connectable
#define 		LL_EXTADV_MODE_RFU        						(0x03)

#define			EXT_ADV_PDU_AUXPTR_OFFSET_UNITS_30_US			0
#define			EXT_ADV_PDU_AUXPTR_OFFSET_UNITS_300_US			1

#define			EXT_ADV_PDU_AUXPTR_CA_51_500_PPM				0
#define			EXT_ADV_PDU_AUXPTR_CA_0_50_PPM					1

#define			EXT_ADV_PDU_SYINC_OFFSET_UNITS_30_US			0
#define			EXT_ADV_PDU_SYINC_OFFSET_UNITS_300_US			1


#define			BIG_PDU_BIG_OFFSET_UNITS_30_US					0
#define			BIG_PDU_BIG_OFFSET_UNITS_300_US					1

/**
 *  @brief  The Aux PHY field: the PHY used to transmit the auxiliary packet
 */
typedef enum{
	PHY_USED_AUXPTR_LE_1M		= 0x00,
	PHY_USED_AUXPTR_LE_2M		= 0x01,
	PHY_USED_AUXPTR_LE_CODED	= 0x02,
	PHY_USED_AUXPTR_RFU_BEGIN	= 0x03,  //0b011~0b111 reserved for future use
}aux_phy_field_t;




// Advertise channel PDU Type
typedef enum advChannelPDUType_e {
	LL_TYPE_ADV_IND 		 = 0x00,
	LL_TYPE_ADV_DIRECT_IND 	 = 0x01,
	LL_TYPE_ADV_NONCONN_IND  = 0x02,
	LL_TYPE_SCAN_REQ 		 = 0x03,		LL_TYPE_AUX_SCAN_REQ 	 = 0x03,
	LL_TYPE_SCAN_RSP 		 = 0x04,
	LL_TYPE_CONNNECT_REQ 	 = 0x05,		LL_TYPE_AUX_CONNNECT_REQ = 0x05,
	LL_TYPE_ADV_SCAN_IND 	 = 0x06,

	LL_TYPE_ADV_EXT_IND		 = 0x07,		LL_TYPE_AUX_ADV_IND 	 = 0x07,	LL_TYPE_AUX_SCAN_RSP = 0x07,	LL_TYPE_AUX_SYNC_IND = 0x07,	LL_TYPE_AUX_CHAIN_IND = 0x07,
	LL_TYPE_AUX_CONNNECT_RSP = 0x08,
} advChannelPDUType_t;



typedef enum {
	TYPE_MASK_ADV_IND 	 		= 	BIT(0),
	TYPE_MASK_ADV_DIRECT_IND	=	BIT(1),
	TYPE_MASK_ADV_NONCONN_IND 	= 	BIT(2),
	TYPE_MASK_SCAN_REQ  	 	= 	BIT(3),
	TYPE_MASK_SCAN_RSP 		 	= 	BIT(4),
	TYPE_MASK_CONNNECT_REQ 	 	= 	BIT(5),
	TYPE_MASK_ADV_SCAN_IND 		= 	BIT(6),
	TYPE_MASK_EXT_ADV 	 		= 	BIT(7),
} advTypeMask_t;








/**
 *  @brief  Definition for LLID of Connected Isochronous PDU header field
 */
typedef enum{
	ISO_LLID_UNFRAMED_PDU_END_FRAGMENT_SDU			= 0x00, //Unframed CIS Data PDU; end fragment of an SDU or a complete SDU
	ISO_LLID_UNFRAMED_PDU_START_CONTI_FRAGMENT_SDU  = 0x01,	ISO_LLID_UNFRAMED_PDU_PADDING_SDU = 0x01,//Unframed CIS Data PDU; start or continuation fragment of an SDU
	ISO_LLID_FRAMED_PDU_SEGMENT_SDU					= 0x02, //Framed CIS Data PDU; one or more segments of an SDU
	ISO_LLID_RESERVED 								= 0x03,
}ISO_llid_type;




/**
 *  @brief  Definition for BIG Control PDU Opcode
 */
typedef enum{
	BIG_CHANNEL_MAP_IND	= 0x00,
	BIG_TERMINATE_IND	= 0x01,
}big_ctrl_op;





/******************************************** L2CAP **************************************************************/

// l2cap pb flag type
#define L2CAP_FRIST_PKT_H2C              0x00
#define L2CAP_CONTINUING_PKT             0x01
#define L2CAP_FIRST_PKT_C2H              0x02


/**
 *  @brief  Definition for L2CAP CID name space for the LE-U
 */
typedef enum{
	L2CAP_CID_NULL				= 0x0000,
	L2CAP_CID_ATTR_PROTOCOL		= 0x0004,
	L2CAP_CID_SIG_CHANNEL		= 0x0005,
	L2CAP_CID_SMP				= 0x0006,
}l2cap_cid_type;


/**
 *  @brief  Definition for L2CAP signal packet formats
 */
typedef enum{
	L2CAP_COMMAND_REJECT_RSP           		= 0x01,
	L2CAP_CONNECTION_REQ                 	= 0x02,
	L2CAP_CONNECTION_RSP                 	= 0x03,
	L2CAP_CONFIGURATION_REQ                	= 0x04,
	L2CAP_CONFIGURATION_RSP           		= 0x05,
	L2CAP_DISCONNECTION_REQ           		= 0x06,
	L2CAP_DISCONNECTION_RSP           		= 0x07,
	L2CAP_ECHO_REQ          		 		= 0x08,
	L2CAP_ECHO_RSP           				= 0x09,
	L2CAP_INFORMATION_REQ           		= 0x0A,
	L2CAP_INFORMATION_RSP           		= 0x0B,
	L2CAP_CREATE_CHANNEL_REQ          		= 0x0C,
	L2CAP_CREATE_CHANNEL_RSP           		= 0x0D,
	L2CAP_MOVE_CHANNEL_REQ           		= 0x0E,
	L2CAP_MOVE_CHANNEL_RSP           		= 0x0F,
	L2CAP_MOVE_CHANNEL_CONFIRMATION_REQ		= 0x10,
	L2CAP_MOVE_CHANNEL_CONFIRMATION_RSP     = 0x11,
	L2CAP_CONNECTION_PARAMETER_UPDATE_REQ	= 0x12,		L2CAP_CMD_CONN_UPD_PARA_REQ		= 0x12,
	L2CAP_CONNECTION_PARAMETER_UPDATE_RSP	= 0x13,		L2CAP_CMD_CONN_UPD_PARA_RESP 	= 0x13,
	L2CAP_LE_CREDIT_BASED_CONNECTION_REQ 	= 0x14,
	L2CAP_LE_CREDIT_BASED_CONNECTION_RSP 	= 0x15,
	L2CAP_FLOW_CONTROL_CREDIT_IND 			= 0x16,
	L2CAP_CREDIT_BASED_CONNECTION_REQ 		= 0x17,	//core_5.2
	L2CAP_CREDIT_BASED_CONNECTION_RSP 		= 0x18,	//core_5.2
	L2CAP_CREDIT_BASED_RECONFIGURE_REQ 		= 0x19,	//core_5.2
	L2CAP_CREDIT_BASED_RECONFIGURE_RSP 		= 0x1A,	//core_5.2
}l2cap_sig_pkt_format;

/**
 *  @brief  Definition for Error Response of signal packet
 *  See the Core_v5.0(Vol 3/Part A/4.1) for more information.
 */
typedef enum{
	SIG_CMD_NOT_UNDERSTAND	= 0,
	SIG_MTU_EXCEEDED		= 1,
	SIG_INVALID_CID_REQUEST	= 2,
}l2cap_sig_cmd_reject_reason;

//Result values for the L2CAP_CREDIT_BASED_CONNECTION_RSP packet
typedef enum{
	L2CAP_ALL_CONN_SUCESSFULL=0,
	L2CAP_ALL_CONN_REFUSED_SPSM_NOT_SUPPORT=2,
	L2CAP_SOME_CONN_REFUSED_INSUFFICIENT_RESOURCES_AVAILABLE=4,
	L2CAP_ALL_CONN_REFUSED_INSUFFICIENT_AUTHENTICATION=5,
	L2CAP_ALL_CONN_REFUSED_INSUFFICIENT_AUTHORIZATION=6,
	L2CAP_ALL_CONN_REFUSED_INSUFFICIENT_ENCRYPTION_KEY_SIZE=7,
	L2CAP_ALL_CONN_REFUSED_INSUFFICIENT_ENCRYPTION=8,
	L2CAP_SOME_CONN_REFUSED_INVALID_SOURCE_CID=9,
	L2CAP_SOME_CONN_REFUSED_SOURCE_CID_ALREADY_ALLOCATED=0x0a,
	L2CAP_ALL_CONN_REFUSED_UNACCEPTABLE_PARAMETERS=0x0b,
	L2CAP_ALL_CONN_REFUSED_INVALID_PARAMETERS=0x0c,
}l2cap_credit_based_conn_rsp_result;
typedef enum{
	L2CAP_RECONFIG_SUCCESSFUL = 0,
	L2CAP_RECONFIG_FAIL_REDUCTION_MTU = 1,
	L2CAP_RECONFIG_FAIL_REDUCTION_MPS = 2,
	L2CAP_RECONFIG_FAIL_ONE_MORE_DCID_INVALID = 3,
	L2CAP_RECONFIG_FAIL_OTHER_UNACCEPTABLE_PARAMETERS = 4,
}l2cap_credit_based_reconfigure_rsp_result;



/**
 *  @brief  AuxPtr field
 */
typedef struct{
	u8  chn_index    :6;
	u8  ca 		 	:1;
	u8  offset_unit	:1;
	u16 aux_offset  :13;
	u16	aux_phy		:3;
} aux_ptr_t;


/**
 *  @brief  SYncInfo field
 */
typedef struct{
	u16 syncPktOffset: 13;
	u16 offsetUnit:    1;
	u16 offsetAdjust:  1;
	u16 rfu: 		   1;

	u16 itvl;

	u8	chm[5];//[0:36]chm, : [37:39]sca
	u32 AA;
	u8 crcInit[3];

	u16 evtCounter;
}sync_info_t;










typedef struct {
	u8 	type;
	u8  rf_len;
	u8 	opcode;
	u8 	winSize;
	u16 winOffset;
	u16 interval;
	u16 latency;
	u16 timeout;
	u16 instant;
}rf_packet_connect_upd_req_t;

typedef struct {
	u8 	type;
	u8  rf_len;
	u8 	opcode;
	u8 	chm[5];
	u16 instant;
} rf_packet_chm_upd_req_t;

typedef struct {
	u8 	type;
	u8  rf_len;
	u8 	opcode;
	u8 	rand[8];
	u16 ediv;
	u8	skdm[8];
	u8	ivm[4];
} rf_packet_ll_enc_req_t;

typedef struct {
	u8 	type;
	u8  rf_len;
	u8 	opcode;
	u8	skds[8];
	u8	ivs[4];
} rf_packet_ll_enc_rsp_t;

typedef struct {
	u8 	type;
	u8  rf_len;
	u8 	opcode;
	u8	unknownType;
} rf_packet_ll_unknown_rsp_t;

typedef struct {
	u8 	type;
	u8  rf_len;
	u8 	opcode;
	u8	featureSet[8];
} rf_packet_ll_feature_exg_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u8 	opcode;
	u8  versNr;
	u16 compId;
	u16 subVersNr;
}rf_packet_version_ind_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u8 	opcode;
	u8  errCode;
}rf_packet_ll_reject_ind_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u8 	opcode;
	u8	rejectOpcode;
	u8  errCode;
}rf_packet_ll_reject_ext_ind_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u8	opcode;
	u8	reason;
}rf_packet_ll_terminate_t;



typedef struct{
	u8	type;
	u8  rf_len;

	u8	opcode;				//
	u8	dat[1];				//
}rf_packet_ll_control_t;








typedef struct {
	u8 llid   :2;
	u8 nesn   :1;
	u8 sn     :1;
	u8 md     :1;
	u8 cp     :1;
	u8 rfu1   :2;
	u8 rf_len;
	u8 cte_info;
}rf_cte_data_header_t;




typedef struct {
    u8 llid   :2;
    u8 nesn   :1;
    u8 sn     :1;
    u8 md     :1;
    u8 rfu1   :3;
    u8 rf_len;
}rf_acl_data_head_t;



typedef struct {
    u8 llid   :2;
    u8 nesn   :1;
    u8 sn     :1;
    u8 cie    :1;
    u8 rfu0   :1;
    u8 npi    :1;
    u8 rfu1   :1;
    u8 rf_len;
}rf_cis_data_hdr_t;



typedef struct {
    u8 llid   :2;
    u8 cssn   :3;
    u8 cstf   :1;
    u8 rfu0   :2;
    u8 rf_len;
}rf_bis_data_hdr_t;



typedef struct{
	u8	type;
	u8  rf_len;
	u8	opcode;
	u8	cigId;	// decided by host
	u8	cisId;  // decided by host
	u8  phyM2S; // decided by host // le_phy_prefer_type_t: BIT(0) BIT(1) BIT(2)
	u8	phyS2M;					   // le_phy_prefer_type_t: BIT(0) BIT(1) BIT(2)

	u32 maxSduM2S :12;	// decided by host
	u32 rfu0 	  :3;
	u32 framed    :1;	// decided by host
	u32 maxSduS2M :12;	// decided by host
	u32 rfu1      :4;

	u8 sduIntvlM2S[3]; // decided by host  SDU_Interval_M_To_S(20 bits) + RFU(4 bits)
	u8 sduIntvlS2M[3]; // decided by host  SDU_Interval_S_To_M(20 bits) + RFU(4 bits)

	u16 maxPduM2S;	 // host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u16 maxPduS2M;	 // host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u8	nse;		 // host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u8	subIntvl[3]; // unit: uS  host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"

	u8 	bnM2S:4;	// host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u8 	bnS2M:4;	// host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u8 	ftM2S;		// host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u8 	ftS2M;		// host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"
	u16	isoIntvl;	//unit: 1.25 mS host assign in "Set CIG PARAM Test Command", but should decided by controller in "Set CIG PARAM Command"

	u8	cisOffsetMin[3];
	u8	cisOffsetMax[3];
	u16	connEventCnt;

}rf_packet_ll_cis_req_t;

typedef struct{
	u8	type;				//RA(1)_TA(1)_RFU(2)_TYPE(4)
	u8  rf_len;				//LEN(6)_RFU(2)
	u8 	opcode;
	u8  cisOffsetMin[3];
	u8  cisOffsetMax[3];
	u16	connEventCnt;
}rf_packet_ll_cis_rsp_t;

typedef struct{
	u8	type;				//RA(1)_TA(1)_RFU(2)_TYPE(4)
	u8  rf_len;				//LEN(6)_RFU(2)
	u8 	opcode;
	u32 cisAccessAddr;      //Access Address of the CIS
	u8  cisOffset[3];
	u8  cigSyncDly[3];
	u8  cisSyncDly[3];
	u16 connEventCnt;
}rf_packet_ll_cis_ind_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u8 	opcode;
	u8  cig_id;
	u8	cis_id;
	u8	errorCode;
}rf_packet_ll_cis_terminate_t;



typedef struct{
	union{
		rf_bis_data_hdr_t  bisPduHdr;
		rf_cis_data_hdr_t  cisPduHdr;
		rf_acl_data_head_t aclPduHdr;
		struct{
			u8 type;
			u8 rf_len;
		}pduHdr;
	}llPduHdr;        /* LL PDU Header: 2 */
	u8 	llPayload[1]; /* Max LL Payload length: 251 */
}llPhysChnPdu_t;

typedef struct{
	u32 dma_len;
	llPhysChnPdu_t llPhysChnPdu;
}rf_packet_ll_data_t;








typedef struct{
    u8 llid   :2;
    u8 nesn   :1;
    u8 sn     :1;
    u8 md     :1;
    u8 rfu1   :3;

	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 data[1];
}rf_packet_l2cap_t;



typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 data[1];
}rf_packet_l2cap_req_t;




typedef struct{
	u8	llid;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8	id;
	u16 data_len;
	u16 min_interval;
	u16 max_interval;
	u16 latency;
	u16 timeout;
}rf_packet_l2cap_connParaUpReq_t;



typedef struct{
	u8	llid;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8	id;
	u16 data_len;
	u16 result;
}rf_packet_l2cap_connParaUpRsp_t;





typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  code;
	u8  id;
	u16 dataLen;
	u16  result;
}rf_pkt_l2cap_sig_connParaUpRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  code;
	u8  id;
	u16 length;
	u16 psm;
	u16 mtu;
	u16 mps;
	u16 init_credits;
	u16 scid[5];
}rf_pkt_l2cap_credit_based_connection_req_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  code;
	u8  id;
	u16 length;
	u16 mtu;
	u16 mps;
	u16 init_credits;
	u16 result;
	u16 dcid[5];
}rf_pkt_l2cap_credit_based_connection_rsp_t;


typedef struct{
	u8	llid;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8	id;
	u16 length;
	u16 spsm;
	u16 mtu;
	u16 mps;
	u16 init_credits;
	u16 scid[5];
}rf_packet_l2cap_credit_based_connection_req_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  code;
	u8  id;
	u16 length;
	u16 mtu;
	u16 mps;
	u16 dcid[5];
}rf_pkt_l2cap_credit_based_reconfigure_req_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  code;
	u8  id;
	u16 length;
	u16 result;
}rf_pkt_l2cap_credit_based_reconfigure_rsp_t;







typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 	errOpcode;
	u16 errHandle;
	u8  errReason;
}rf_packet_att_errRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;

	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16	startingHandle;
	u16	endingHandle;
}rf_packet_att_findInfo_t;

typedef struct{
	u8	type;
	u8  rf_len;

	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16	startingHandle;
	u16	endingHandle;
	u8	attType[2];				//
}rf_packet_att_readByType_t;

typedef struct{
	u8	type;
	u8  rf_len;

	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16	startingHandle;
	u16	endingHandle;
	u8	attType[2];
	u8  attValue[2];
}rf_packet_att_findByTypeReq_t;

typedef struct{
	u8	type;
	u8  rf_len;

	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16 data[1];
}rf_packet_att_findByTypeRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16 handle;
}rf_packet_att_read_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16 handle;
	u16 offset;
}rf_packet_att_readBlob_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16	startingHandle;
	u16	endingHandle;
	u8	attGroupType[2];				//
}rf_packet_att_readByGroupType_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 	value[22];
}rf_packet_att_readRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8  datalen;
	u8  data[1];			// character_handle / property / value_handle / value
}rf_pkt_att_readByTypeRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8  datalen;
	u8  data[1];			// character_handle / property / value_handle / value
}rf_packet_att_readByTypeRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8  datalen;
	u8  data[1];			// character_handle / property / value_handle / value
}rf_packet_att_data_readByTypeRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8  datalen;
	u8  data[3];
}rf_packet_att_readByGroupTypeRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8  format;
	u8  data[1];			// character_handle / property / value_handle / value
}rf_packet_att_findInfoRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 flags;
}rf_packet_att_executeWriteReq_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u16 handle;
	u8 value;
}rf_packet_att_write_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 mtu[2];
}rf_packet_att_mtu_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 mtu[2];
}rf_packet_att_mtu_exchange_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
}rf_packet_att_writeRsp_t;

typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8  datalen;
	u8  data[1];			// character_handle / property / value_handle / value
}att_readByTypeRsp_t;


typedef struct{
	u8	type;
	u8  rf_len;
	u16	l2capLen;
	u16	chanId;
	u8  opcode;
	u8 	value[22];
}att_readRsp_t;














#define U16_SMALLER_THAN(d1, d2)     		  ((unsigned short)((d1) - (d2)) > BIT(15))
#define U16_GREATER_THAN_EQUAL_TO(d1, d2)     ((unsigned short)((d1) - (d2)) < BIT(15))

#define U32_SMALLER_THAN(d1, d2)     		  ((unsigned int)((d1) - (d2)) > BIT(31))
#define U32_GREATER_THAN_EQUAL_TO(d1, d2)     ((unsigned int)((d1) - (d2)) < BIT(31))


extern u32 dbg_infor_mask;

void smemset(void * dest, int val, int len);
void smemcpy(void *pd, void *ps, int len);
int  smemcmp(void * m1, void * m2, int len);
void smemset4(void * dest, int val, int len);
void smemcpy4(void *pd, void *ps, int len);
int  smemcmp4(unsigned int * m1, unsigned int * m2, register unsigned int len);

void *smemmove( void *dest , const void *src , size_t count);

int tlk_strlen(char *str);

#endif /* BLE_STACK_H_ */
